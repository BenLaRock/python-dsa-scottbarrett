class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        

class LinkedList:
    def __init__(self, value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    def print_list(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next
        
    def append(self, value):
        new_node = Node(value)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.length += 1
        return True

    def pop(self):
        if self.length == 0:
            return None
        temp = self.head
        pre = self.head
        while(temp.next):
            pre = temp
            temp = temp.next
        self.tail = pre
        self.tail.next = None
        self.length -= 1
        if self.length == 0:
            self.head = None
            self.tail = None
        return temp

    def prepend(self, value):
        new_node = Node(value)
        
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
        else:
            temp = self.head
            self.head = new_node
            self.head.next = temp
        
        self.length += 1
        return True

    def pop_first(self):
        if self.length == 0:
            return None
        
        temp = self.head
        self.head = temp.next
        temp.next = None # removes node from linked list
        self.length -= 1

        # If list became empty set head and tail pointers to None
        if self.length == 0:
            self.head = None
            self.tail = None

        return temp
    
    def get(self, index):
        if index < 0 or index >= self.length:
            return None
        
        temp = self.head
        # Move temp point along until correct index
        for _ in range(index):
            temp = temp.next
        return temp

    def set_value(self, index, value):
        temp = self.get(index)


        if not temp:
            return False
        temp.value = value
        return True
    
    def insert(self, index, value):
        if index < 0 or index > self.length:
            return False
        
        if index == 0:
            self.prepend(value)
        
        elif index == self.length:
            self.append(value)
        
        else:
            new_node = Node(value)
            pre = self.get(index - 1)
            temp = pre.next
            new_node.next = temp
            pre.next = new_node
            self.length += 1 # prepend and append already do this (don't double increment)

        return True

    def remove(self, index):
        if index < 0 or index >= self.length:
            return None

        if index == 0:
            return self.pop_first()
        elif index == self.length - 1:
            return self.pop()
        else:
            pre = self.get(index - 1)
            temp = pre.next
            pre.next = temp.next # connects before node to after node
            temp.next = None # disconnects from list
            self.length -= 1
            return temp

    def reverse(self):
        if self.length == 0:
            return None
        
        if self.length == 1:
            return True
        
        # Flip head and tail pointers
        temp = self.head
        self.head = self.tail # head is now tail
        self.tail = temp # tail now points to temp (head)
        print("self.head: ", self.head.value)
        
        print("temp: ", temp.value)
        after = temp.next
        print("after: ", after.value)
        before = None
        print("before: ", before)
        print()

        for i in range(self.length):
            print("temp: ", temp.value)
            after = temp.next
            print("after: ", after) # after points to the next node in the orig sequence

            temp.next = before # flip the next point; first item next points to None but then before gets updated
            before = temp # before moves up from None to current node (temp)
            temp = after # 
        

my_linked_list = LinkedList(1)
my_linked_list.append(2)
my_linked_list.append(3)
my_linked_list.append(4)

print('LL before reverse():')
my_linked_list.print_list()

my_linked_list.reverse()

print('\nLL after reverse():')
my_linked_list.print_list()



"""
    EXPECTED OUTPUT:
    ----------------
    LL before reverse():
    1
    2
    3
    4

    LL after reverse():
    4
    3
    2
    1
    
"""